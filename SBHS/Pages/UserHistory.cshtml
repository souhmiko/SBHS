@page
@model SBHS.Pages.UserHistoryModel
@{
    Layout = null;
}

<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@100;300;400;500;700;900&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" integrity="sha512-Avb2QiuDEEvB4bZJYdft2mNjVShBftLdPG8FJ0V7irTLQ8Uo0qcPxh4Plq7G5tGm0rU+1SPhVotteLpBERwTkw==" crossorigin="anonymous" referrerpolicy="no-referrer" />


<style>
    h2 {
        text-align: center;
        margin-top: 30px;
        flex-grow: 1;
    }

    .card-container {
        display: flex; /* Use flexbox to arrange cards horizontally */
        flex-wrap: wrap; /* Allow cards to wrap to the next row */
        justify-content: flex-start; /* Distribute space between cards */
        margin-bottom: 20px; /* Add some bottom margin for spacing */
    }

    .card {
        border: 1px solid #333;
        border-radius: 5px;
        padding: 10px;
        margin-bottom: 20px;
        width: calc(20% - 10px); /* Set the width of each card to fit two cards in a row with space between them */
        box-sizing: border-box;
        margin-right: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Add box-shadow for a subtle shadow effect */
    }

        .card strong {
            font-weight: bold;
            display: inline-block;
            width: 120px;
        }

    .approved {
        background-color: #c8e6c9; /* Light green for approved requests */
    }

    .rejected {
        background-color: #ffcdd2; /* Light red for rejected requests */
    }

    .card-content {
        padding: 20px;   
    }

    .header {
        display: flex;
        align-items: center;
        justify-content: flex-start; /* Change this to flex-start */
        margin-bottom: 20px;
    }

    .back-button {
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 5px;
        padding: 8px 16px;
        cursor: pointer;
        margin-right: 10px; /* Add margin to separate the button from h2 */
    }

    .tabs {
        display: flex;
        justify-content: center; /* Center the tabs horizontally */
        margin-bottom: 20px; /* Add margin at the bottom for spacing */
    }

    .tablink {
        background-color: inherit;
        float: left;
        border: none;
        outline: none;
        cursor: pointer;
        padding: 14px 16px;
        transition: 0.3s;
    }

        .tablink:hover {
            background-color: #ddd;
        }

    .active {
        background-color: #ccc;
    }

</style>

<div class="header">
    <a class="back-button" href="/User"><i class="fa-solid fa-arrow-left"></i></a>
    <h2>Request History</h2>
</div>
<hr />

<div class="tabs">
    <button class="tablink" onclick="openTab(event, 'leaveRequests')" id="defaultOpen">Leave Requests</button>
    <button class="tablink" onclick="openTab(event, 'oncallRequests')">Oncall Requests</button>
</div>

<div id="leaveRequests" class="card-content">

    @if (Model.LeaveRequests.Any())
    {
        <h3>Leave Requests</h3>
        <div class="card-container" id="leaveRequestContainer">
            @foreach (var leaveRequest in Model.LeaveRequests)
            {
                <div class="card">
                    <strong>Employee:</strong> @leaveRequest.UserDetail.FullName<br />
                    <strong>Leave Type:</strong> @leaveRequest.LeaveType.LeaveTypeName<br />
                    <strong>Start Date:</strong> @leaveRequest.StartDate?.ToShortDateString()<br />
                    <strong>End Date:</strong> @leaveRequest.EndDate?.ToShortDateString()<br />
                    <strong>Reason:</strong> @leaveRequest.Reason<br />
                    <strong>Days:</strong> @leaveRequest.Days<br />
                    <strong>Status:</strong> @leaveRequest.LeaveStatus.LeaveStatusName<br />
                </div>
            }
        </div>
    }

    @if (Model.ApprovedLeaveRequests.Any())
    {
        <h3>Approved Leave Requests</h3>
        <div class="card-container" id="leaveRequestContainer">
            @foreach (var leaveRequest in Model.ApprovedLeaveRequests)
            {
                <div class="card approved">
                    <strong>Leave Type:</strong> @leaveRequest.LeaveType.LeaveTypeName<br />
                    <strong>Start Date:</strong> @leaveRequest.StartDate?.ToShortDateString()<br />
                    <strong>End Date:</strong> @leaveRequest.EndDate?.ToShortDateString()<br />
                    <strong>Reason:</strong> @leaveRequest.Reason<br />
                    <strong>Days:</strong> @leaveRequest.Days<br />
                    <strong>Status:</strong> @leaveRequest.LeaveStatus.LeaveStatusName<br />
                </div>
            }
        </div>
    }

    @if (Model.RejectedLeaveRequests.Any())
    {
        <h3>Rejected Leave Requests</h3>
        <div class="card-container" id="leaveRequestContainer">
            @foreach (var leaveRequest in Model.RejectedLeaveRequests)
            {
                <div class="card rejected">
                    <strong>Leave Type:</strong> @leaveRequest.LeaveType.LeaveTypeName<br />
                    <strong>Start Date:</strong> @leaveRequest.StartDate?.ToShortDateString()<br />
                    <strong>End Date:</strong> @leaveRequest.EndDate?.ToShortDateString()<br />
                    <strong>Reason:</strong> @leaveRequest.Reason<br />
                    <strong>Days:</strong> @leaveRequest.Days<br />
                    <strong>Status:</strong> @leaveRequest.LeaveStatus.LeaveStatusName<br />
                </div>
            }
        </div>
    }

</div>


<div id="oncallRequests" class="card-content">
    @if (Model.OncallRequests.Any())
    {
        <h3>Oncall Requests</h3>
        <div class="card-container" id="oncallRequestContainer">
            @foreach (var oncallRequest in Model.OncallRequests)
            {
                <div class="card">
                    <strong>Employee:</strong> @oncallRequest.UserDetail.FullName<br />
                    <strong>Date:</strong> @oncallRequest.DateTimeOnCall?.ToShortDateString()<br />
                    <strong>Status:</strong> @oncallRequest.LeaveStatus.LeaveStatusName<br />
                </div>
            }
        </div>
    }

    @if (Model.ApprovedOncallRequests.Any())
    {
        <h3>Approved Oncall Requests</h3>
        <div class="card-container" id="oncallRequestContainer">
            @foreach (var oncallRequest in Model.ApprovedOncallRequests)
            {
                <div class="card approved">
                    <strong>Employee:</strong> @oncallRequest.UserDetail.FullName<br />
                    <strong>Date:</strong> @oncallRequest.DateTimeOnCall?.ToShortDateString()<br />
                    <strong>Status:</strong> <span class="status-approved">@oncallRequest.LeaveStatus.LeaveStatusName</span><br />
                </div>
            }
        </div>
    }

    @if (Model.RejectedOncallRequests.Any())
    {
        <h3>Rejected Oncall Requests</h3>
        <div class="card-container" id="oncallRequestContainer">
            @foreach (var oncallRequest in Model.RejectedOncallRequests)
            {
                <div class="card rejected">
                    <strong>Employee:</strong> @oncallRequest.UserDetail.FullName<br />
                    <strong>Date:</strong> @oncallRequest.DateTimeOnCall?.ToShortDateString()<br />
                    <strong>Status:</strong> <span class="status-approved">@oncallRequest.LeaveStatus.LeaveStatusName</span><br />
                </div>
            }
        </div>
    }

</div>


<script>
    // Function to open a specific tab
    function openTab(evt, tabName) {
        var i, tabcontent, tablinks;

        // Hide all tab contents
        tabcontent = document.getElementsByClassName("card-content");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }

        // Remove 'active' class from all tab links
        tablinks = document.getElementsByClassName("tablink");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].classList.remove("active");
        }

        // Show the specific tab content
        document.getElementById(tabName).style.display = "block";

        // Add 'active' class to the clicked tab link
        evt.currentTarget.classList.add("active");
    }

    // Function to set the default active tab
    function setDefaultTab() {
        // Get the default tab name from the URL or set a default value
        var defaultTab = window.location.hash.substr(1) || 'leaveRequests';

        // Find and click the tab link with the default tab name
        var tabLink = document.querySelector('.tablink[data-tab="' + defaultTab + '"]');
        if (tabLink) {
            tabLink.click();
        } else {
            // If the default tab is not found, click the first tab
            document.querySelector('.tablink').click();
        }
    }

    // Call the setDefaultTab function when the page loads
    window.onload = setDefaultTab;
</script>