@page
@model SBHS.Pages.RequestHistoryModel
@{
}

<style>
    h2{
        text-align:center;
        margin-top:20px;
    }

    .card-body{
        display: flex; /* Use flexbox to arrange cards horizontally */
        flex-wrap: wrap; /* Allow cards to wrap to the next row */
        justify-content: flex-start; /* Distribute space between cards */
        margin-bottom: 20px; /* Add some bottom margin for spacing */
    }

    .card-content {
        padding: 20px;
    }

    .request-card {
        border: 1px solid #333;
        border-radius: 5px;
        padding: 10px;
        margin-bottom: 20px;
        width: calc(30% - 10px); /* Adjust the width to fit two cards in a row */
        box-sizing: border-box;
        margin-right: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Add box-shadow for a subtle shadow effect */
    }

    .status-approved {
        background-color: green;
        color: white;
        border-radius: 30px;
        padding: 3px;
    }

    .status-rejected {
        background-color: red;
        color: white;
        border-radius: 30px;
        padding: 3px;
    }

    .request-card strong {
        font-weight: bold;
        display: inline-block;
        width: 120px;
    }

    .tabs {
        display: flex;
        justify-content: center; /* Center the tabs horizontally */
        margin-bottom: 10px; /* Add margin at the bottom for spacing */
    }

    .tablink {
        background-color: inherit;
        float: left;
        border: none;
        outline: none;
        cursor: pointer;
        padding: 14px 16px;
        transition: 0.3s;
    }

    .tablink:hover {
        background-color: #ddd;
    }

    .active {
        background-color: #ccc;
    }

    .subtitle{
        padding:10px;
    }

</style>

<h2>Requests History</h2>
<hr/>


<div class="tabs">
    <button class="tablink" onclick="openTab(event, 'leaveRequests')" id="defaultOpen">Leave Requests</button>
    <button class="tablink" onclick="openTab(event, 'oncallRequests')">Oncall Requests</button>
</div>


<div id="leaveRequests" class="card-content">
        <h3 class="subtitle">Approved Leave Requests</h3>
        <div class="card-body" id="leaveRequestContainer">
            @foreach (var leaveRequest in Model.ApprovedLeaveRequests)
            {
                <div class="request-card">
                    <strong>Employee:</strong> @leaveRequest.UserDetail.FullName<br />
                    <strong>Leave Type:</strong> @leaveRequest.LeaveType.LeaveTypeName<br />
                    <strong>Start Date:</strong> @leaveRequest.StartDate?.ToShortDateString()<br />
                    <strong>End Date:</strong> @leaveRequest.EndDate?.ToShortDateString()<br />
                    <strong>Reason:</strong> @leaveRequest.Reason<br />
                    <strong>Days:</strong> @leaveRequest.Days<br />
                    <strong>Status:</strong> <span class="status-approved">@leaveRequest.LeaveStatus.LeaveStatusName</span><br />
                </div>
                
            }
        </div>


        <h3 class="subtitle">Rejected Leave Requests</h3>

        <div class="card-body" id="leaveRequestContainer">
            @foreach (var leaveRequest in Model.RejectedLeaveRequests)
            {
                <div class="request-card">
                    <strong>Employee:</strong> @leaveRequest.UserDetail.FullName<br />
                    <strong>Leave Type:</strong> @leaveRequest.LeaveType.LeaveTypeName<br />
                    <strong>Start Date:</strong> @leaveRequest.StartDate?.ToShortDateString()<br />
                    <strong>End Date:</strong> @leaveRequest.EndDate?.ToShortDateString()<br />
                    <strong>Reason:</strong> @leaveRequest.Reason<br />
                    <strong>Days:</strong> @leaveRequest.Days<br />
                    <strong>Status:</strong> <span class="status-rejected">@leaveRequest.LeaveStatus.LeaveStatusName</span><br />
                </div>
            }
        </div>
</div>

<div id="oncallRequests" class="card-content">
        <h3 class="subtitle">Approved Oncall Requests</h3>

        <div class="card-body" id="oncallRequestContainer">
            @foreach (var oncallRequest in Model.ApprovedOncallRequests)
            {
                <div class="request-card">
                    <strong>Employee:</strong> @oncallRequest.UserDetail.FullName<br />
                    <strong>Date:</strong> @oncallRequest.DateTimeOnCall?.ToShortDateString()<br />
                    <strong>Status:</strong> <span class="status-approved">@oncallRequest.LeaveStatus.LeaveStatusName</span><br />
                </div>
            }
        </div>



        <h3 class="subtitle">Rejected Oncall Requests</h3>

        <div class="card-body" id="oncallRequestContainer">
            @foreach (var oncallRequest in Model.RejectedOncallRequests)
            {
                <div class="request-card">
                    <strong>Employee:</strong> @oncallRequest.UserDetail.FullName<br />
                    <strong>Date:</strong> @oncallRequest.DateTimeOnCall?.ToShortDateString()<br />
                    <strong>Status:</strong> <span class="status-rejected">@oncallRequest.LeaveStatus.LeaveStatusName</span><br />
                </div>
            }
        </div>
 </div>





<script>
    // Function to open a specific tab
    function openTab(evt, tabName) {
        var i, tabcontent, tablinks;

        // Hide all tab contents
        tabcontent = document.getElementsByClassName("card-content");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }

        // Remove 'active' class from all tab links
        tablinks = document.getElementsByClassName("tablink");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].classList.remove("active");
        }

        // Show the specific tab content
        document.getElementById(tabName).style.display = "block";

        // Add 'active' class to the clicked tab link
        evt.currentTarget.classList.add("active");
    }

    // Function to set the default active tab
    function setDefaultTab() {
        // Get the default tab name from the URL or set a default value
        var defaultTab = window.location.hash.substr(1) || 'leaveRequests';

        // Find and click the tab link with the default tab name
        var tabLink = document.querySelector('.tablink[data-tab="' + defaultTab + '"]');
        if (tabLink) {
            tabLink.click();
        } else {
            // If the default tab is not found, click the first tab
            document.querySelector('.tablink').click();
        }
    }

    // Call the setDefaultTab function when the page loads
    window.onload = setDefaultTab;
</script>