// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SBHS.Models;

#nullable disable

namespace SBHS.Migrations
{
    [DbContext(typeof(SBHSDbContext))]
    partial class SBHSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            Name = "user",
                            NormalizedName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SBHS.Models.Departments", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("SBHS.Models.LeaveConditions", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("LeaveConditionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxAmountofStaffAllowed")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkTitleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkTitleId");

                    b.ToTable("LeaveConditions");
                });

            modelBuilder.Entity("SBHS.Models.LeaveRequests", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ApprovedByUserDetailId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateApproved")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateRejected")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Days")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("LeaveStatusId")
                        .HasColumnType("int");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectedByUserDetailId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<byte[]>("UploadDocument")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("UserDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeaveStatusId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("UserDetailId");

                    b.ToTable("LeaveRequests");
                });

            modelBuilder.Entity("SBHS.Models.LeaveStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("LeaveStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LeaveStatus");
                });

            modelBuilder.Entity("SBHS.Models.LeaveTypes", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("LeaveTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LeaveTypes");
                });

            modelBuilder.Entity("SBHS.Models.OncallRequests", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ApprovedByUserDetailId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateApproved")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateRejected")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateTimeOnCall")
                        .HasColumnType("datetime");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("LeaveStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RejectedByUserDetailId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LeaveStatusId");

                    b.HasIndex("UserDetailId");

                    b.ToTable("OncallRequests");
                });

            modelBuilder.Entity("SBHS.Models.ShiftDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<int>("ShiftTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShiftTypeId");

                    b.HasIndex("UserDetailId");

                    b.ToTable("ShiftDetails");
                });

            modelBuilder.Entity("SBHS.Models.ShiftTypes", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ShiftTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShiftTypes");
                });

            modelBuilder.Entity("SBHS.Models.UserDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AspNetUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("WorkTitleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("WorkTitleId");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("SBHS.Models.WorkTitles", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("WorkTitleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkTitles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SBHS.Models.LeaveConditions", b =>
                {
                    b.HasOne("SBHS.Models.WorkTitles", "WorkTitle")
                        .WithMany("LeaveConditions")
                        .HasForeignKey("WorkTitleId")
                        .IsRequired()
                        .HasConstraintName("FK_LeaveConditions_WorkTitles");

                    b.Navigation("WorkTitle");
                });

            modelBuilder.Entity("SBHS.Models.LeaveRequests", b =>
                {
                    b.HasOne("SBHS.Models.LeaveStatus", "LeaveStatus")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("LeaveStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_LeaveRequests_LeaveStatus");

                    b.HasOne("SBHS.Models.LeaveTypes", "LeaveType")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("LeaveTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_LeaveRequests_LeaveTypes");

                    b.HasOne("SBHS.Models.UserDetails", "UserDetail")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("UserDetailId")
                        .IsRequired()
                        .HasConstraintName("FK_LeaveRequests_UserDetails");

                    b.Navigation("LeaveStatus");

                    b.Navigation("LeaveType");

                    b.Navigation("UserDetail");
                });

            modelBuilder.Entity("SBHS.Models.OncallRequests", b =>
                {
                    b.HasOne("SBHS.Models.Departments", "Department")
                        .WithMany("OncallRequests")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_OncallRequests_Departments");

                    b.HasOne("SBHS.Models.LeaveStatus", "LeaveStatus")
                        .WithMany("OncallRequests")
                        .HasForeignKey("LeaveStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_OncallRequests_LeaveStatus");

                    b.HasOne("SBHS.Models.UserDetails", "UserDetail")
                        .WithMany("OncallRequests")
                        .HasForeignKey("UserDetailId")
                        .IsRequired()
                        .HasConstraintName("FK_OncallRequests_UserDetails");

                    b.Navigation("Department");

                    b.Navigation("LeaveStatus");

                    b.Navigation("UserDetail");
                });

            modelBuilder.Entity("SBHS.Models.ShiftDetails", b =>
                {
                    b.HasOne("SBHS.Models.ShiftTypes", "ShiftType")
                        .WithMany("ShiftDetails")
                        .HasForeignKey("ShiftTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ShiftDetails_ShiftTypes");

                    b.HasOne("SBHS.Models.UserDetails", "UserDetail")
                        .WithMany("ShiftDetails")
                        .HasForeignKey("UserDetailId")
                        .IsRequired()
                        .HasConstraintName("FK_ShiftDetails_UserDetails");

                    b.Navigation("ShiftType");

                    b.Navigation("UserDetail");
                });

            modelBuilder.Entity("SBHS.Models.UserDetails", b =>
                {
                    b.HasOne("SBHS.Models.Departments", "Department")
                        .WithMany("UserDetails")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_UserDetails_Departments");

                    b.HasOne("SBHS.Models.WorkTitles", "WorkTitle")
                        .WithMany("UserDetails")
                        .HasForeignKey("WorkTitleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserDetails_WorkTitles");

                    b.Navigation("Department");

                    b.Navigation("WorkTitle");
                });

            modelBuilder.Entity("SBHS.Models.Departments", b =>
                {
                    b.Navigation("OncallRequests");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("SBHS.Models.LeaveStatus", b =>
                {
                    b.Navigation("LeaveRequests");

                    b.Navigation("OncallRequests");
                });

            modelBuilder.Entity("SBHS.Models.LeaveTypes", b =>
                {
                    b.Navigation("LeaveRequests");
                });

            modelBuilder.Entity("SBHS.Models.ShiftTypes", b =>
                {
                    b.Navigation("ShiftDetails");
                });

            modelBuilder.Entity("SBHS.Models.UserDetails", b =>
                {
                    b.Navigation("LeaveRequests");

                    b.Navigation("OncallRequests");

                    b.Navigation("ShiftDetails");
                });

            modelBuilder.Entity("SBHS.Models.WorkTitles", b =>
                {
                    b.Navigation("LeaveConditions");

                    b.Navigation("UserDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
